{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifying Fashion-MNIST\n",
    "\n",
    "Now it's your turn to build and train a neural network. You'll be using the [Fashion-MNIST dataset](https://github.com/zalandoresearch/fashion-mnist), a drop-in replacement for the MNIST dataset. MNIST is actually quite trivial with neural networks where you can easily achieve better than 97% accuracy. Fashion-MNIST is a set of 28x28 greyscale images of clothes. It's more complex than MNIST, so it's a better representation of the actual performance of your network, and a better representation of datasets you'll use in the real world.\n",
    "\n",
    "<img src='assets/fashion-mnist-sprite.png' width=500px>\n",
    "\n",
    "In this notebook, you'll build your own neural network. For the most part, you could just copy and paste the code from Part 3, but you wouldn't be learning. It's important for you to write the code yourself and get it to work. Feel free to consult the previous notebooks though as you work through this.\n",
    "\n",
    "First off, let's load the dataset through torchvision."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n",
      "Processing...\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from torchvision import datasets, transforms\n",
    "import helper\n",
    "\n",
    "# Define a transform to normalize the data\n",
    "transform = transforms.Compose([transforms.ToTensor(),\n",
    "                                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
    "# Download and load the training data\n",
    "trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)\n",
    "trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)\n",
    "\n",
    "# Download and load the test data\n",
    "testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)\n",
    "testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we can see one of the images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe3b42026a0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "image, label = next(iter(trainloader))\n",
    "helper.imshow(image[0,:]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building the network\n",
    "\n",
    "Here you should define your network. As with MNIST, each image is 28x28 which is a total of 784 pixels, and there are 10 classes. You should include at least one hidden layer. We suggest you use ReLU activations for the layers and to return the logits or log-softmax from the forward pass. It's up to you how many layers you add and the size of those layers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch import nn, optim\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define your network architecture here\n",
    "class Classifier(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(784, 256)\n",
    "        self.fc2 = nn.Linear(256, 128)\n",
    "        self.fc3 = nn.Linear(128, 64)\n",
    "        self.fc4 = nn.Linear(64, 10)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        # make sure input tensor is flattened\n",
    "        x = x.view(x.shape[0], -1)\n",
    "        \n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.relu(self.fc2(x))\n",
    "        x = F.relu(self.fc3(x))\n",
    "        x = F.log_softmax(self.fc4(x), dim=1)\n",
    "        \n",
    "        return x\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train the network\n",
    "\n",
    "Now you should create your network and train it. First you'll want to define [the criterion](http://pytorch.org/docs/master/nn.html#loss-functions) ( something like `nn.CrossEntropyLoss`) and [the optimizer](http://pytorch.org/docs/master/optim.html) (typically `optim.SGD` or `optim.Adam`).\n",
    "\n",
    "Then write the training code. Remember the training pass is a fairly straightforward process:\n",
    "\n",
    "* Make a forward pass through the network to get the logits \n",
    "* Use the logits to calculate the loss\n",
    "* Perform a backward pass through the network with `loss.backward()` to calculate the gradients\n",
    "* Take a step with the optimizer to update the weights\n",
    "\n",
    "By adjusting the hyperparameters (hidden units, learning rate, etc), you should be able to get the training loss below 0.4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Create the network, define the criterion and optimizer\n",
    "model = Classifier()\n",
    "criterion = nn.NLLLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.003)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training loss: 477.552669018507\n",
      "Training loss: 366.88948062062263\n",
      "Training loss: 333.4929820969701\n",
      "Training loss: 312.4028413593769\n",
      "Training loss: 297.46235651522875\n"
     ]
    }
   ],
   "source": [
    "# TODO: Train the network here\n",
    "epochs = 5\n",
    "\n",
    "for e in range(epochs):\n",
    "    running_loss = 0\n",
    "    for images, labels in trainloader:\n",
    "        log_ps = model(images)\n",
    "        loss = criterion(log_ps, labels)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "    else:\n",
    "        print(f\"Training loss: {running_loss}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe362431320>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 204,
       "width": 423
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import helper\n",
    "\n",
    "# Test out your network!\n",
    "\n",
    "dataiter = iter(testloader)\n",
    "images, labels = dataiter.next()\n",
    "img = images[7]\n",
    "# Convert 2D image to 1D vector\n",
    "img = img.resize_(1, 784)\n",
    "\n",
    "# TODO: Calculate the class probabilities (softmax) for img\n",
    "ps = torch.exp(model(img))\n",
    "\n",
    "# Plot the image and probabilities\n",
    "helper.view_classify(img.resize_(1, 28, 28), ps, version='Fashion')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
